/*
//可以看https://www.cnblogs.com/lojunren/p/3856290.html、http://man7.org/linux/man-pages/man7/epoll.7.html
以及http://blog.chinaunix.net/uid-28541347-id-4273856.html了解epoll

linux epoll(2)

*/







/*
作用:
epoll I/O事件通知工具
头文件:
sys/epoll.h
描述:
epoll API接口和poll类似，用来监控多文件描述符来查看是否能够在其上能够进行I/O操作,epoll也能被用作边缘触发接口或电平触发接
口，能够很好的兼容大量被监控文件描述符。

epoll API的核心理念是epoll实例，一个内核数据结构，从用户层面来看，能够被认为是两个list的容器:
1. The interest list(epoll set):为文件描述符的集合，该描述符已经在进程中注册和监控
2. The ready list:已经准备好做I/O操作的文件描述符的集合。The ready list是The interest list的子集，动态位于内核中，作为活动的I/O文件描述符。

下面的系统调用用来创建和管理一个epoll实例
epoll_create 创建一个新的epoll实例，并返回一个文件描述符(指向该实例)
epoll_ctl 将特定的文件描述符放到epoll实例的interest列表中
epoll_wait 等待I/O事件，当没有可用事件则阻塞线程(用来获取ready list中的文件描述符)

电平触发以及边沿触发
epoll事件分发接口能够处理边沿触发以及电平触发。这两种机制的差异如下所示。
1. 文件描述符可以看做是已经注册到epoll实例中的管道的读侧。
2. 在管道的写侧每次写2KB数据。
3. 当调用epoll_wait时，将返回一个rfd管道，作为已经准备好的文件描述符。
4. 管道读写者每次从rfd读取1KB的数据。
5. 调用epoll_wait结束。

如果rfd文件描述符已经使用EPOLLET标志添加到epoll实例中，当调用epoll_wait尽管可能还有数据在文件输入缓冲区中，在第五步的时候仍然可能被挂起，与此同时，远程对等机可能需要基于已发送数据的相应。原因是因为边缘出发模式只在受监视的文件描述符上发生更改时才会发布事件。所以在第五步，调用者可能最终会等待一些已经存在于输入缓冲区中的数据。在上面实例中，rfd上的事件生成只会因为第2步完成写入并且事件被第3步小韩。因为第4步中完成的读取操作不会消耗整个缓冲区的数据，在第五步中，对epoll_wait的调用可能会无限期的阻塞。

使用EPOLLET标志的应用程序应使用非阻塞文件描述符来避免阻塞式的度或者写以免饿死同时处理多个文件描述符的任务。使用EPOLLET的建议如下所示。
1. 使用非阻塞的文件描述符
2. 只在读写之后等待事件返回

相反，当使用电平触发接口时(默认),epoll相当于只是一个更快点的poll，并且能在任何地方使用。


因为即使使用边沿触发的epoll，当接收多个数据块的时候也会生成多个事件，该调用函数有EPOLLONESHOT标志，来告诉epoll当接收epoll_wait的事件禁用接收文件描述符。当EPOLLONESHOT被设置时，利用EPOLL_CTL_MOD使用epoll_ctl来重新定义文件描述符。

 If multiple threads (or processes, if child processes have inherited
       the epoll file descriptor across fork(2)) are blocked in
       epoll_wait(2) waiting on the same the same epoll file descriptor and
       a file descriptor in the interest list that is marked for edge-
       triggered (EPOLLET) notification becomes ready, just one of the
       threads (or processes) is awoken from epoll_wait(2).  This provides a
       useful optimization for avoiding "thundering herd" wake-ups in some
       scenarios.

*/